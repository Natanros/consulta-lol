// Servi√ßo inteligente que escolhe automaticamente entre proxy local ou proxies p√∫blicos
import {
  searchSummonerLocal,
  getWeeklyRotationLocal,
  checkProxyHealth,
} from "./localProxy";
import { searchSummoner as searchSummonerPublic } from "./simpleSummoner";
import { getWeeklyRotation as getWeeklyRotationPublic } from "./riotAPICORS";

// Cache para verifica√ß√£o de disponibilidade do proxy
let proxyAvailable: boolean | null = null;
let lastProxyCheck = 0;
const PROXY_CHECK_INTERVAL = 30000; // 30 segundos

// Fun√ß√£o para verificar disponibilidade do proxy local
const isProxyAvailable = async (): Promise<boolean> => {
  const now = Date.now();

  // Se j√° verificamos recentemente, usar cache
  if (proxyAvailable !== null && now - lastProxyCheck < PROXY_CHECK_INTERVAL) {
    return proxyAvailable;
  }

  // Verificar disponibilidade do proxy
  try {
    proxyAvailable = await checkProxyHealth();
    lastProxyCheck = now;

    if (proxyAvailable) {
      console.log("‚úÖ Proxy local dispon√≠vel - usando proxy local");
    } else {
      console.log("‚ö†Ô∏è Proxy local n√£o dispon√≠vel - usando proxies p√∫blicos");
    }

    return proxyAvailable;
  } catch (error) {
    console.log("‚ö†Ô∏è Erro ao verificar proxy local - usando proxies p√∫blicos");
    proxyAvailable = false;
    lastProxyCheck = now;
    return false;
  }
};

// Fun√ß√£o inteligente para buscar invocador
export const searchSummoner = async (riotId: string) => {
  const useLocalProxy = await isProxyAvailable();

  if (useLocalProxy) {
    console.log("üöÄ Usando proxy local para buscar invocador");
    return await searchSummonerLocal(riotId);
  } else {
    console.log("üåê Usando proxies p√∫blicos para buscar invocador");
    return await searchSummonerPublic(riotId);
  }
};

// Fun√ß√£o inteligente para buscar rota√ß√£o semanal
export const getWeeklyRotation = async () => {
  const useLocalProxy = await isProxyAvailable();

  if (useLocalProxy) {
    console.log("üöÄ Usando proxy local para buscar rota√ß√£o");
    return await getWeeklyRotationLocal();
  } else {
    console.log("üåê Usando proxies p√∫blicos para buscar rota√ß√£o");
    return await getWeeklyRotationPublic();
  }
};

// Exportar outras fun√ß√µes √∫teis
export { getSummonerIconUrl, isValidRiotId } from "./localProxy";
